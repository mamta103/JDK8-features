--------------------------------------------------------
--------------------------------------------------------
Java 8 Features
Important 
1.Functional Programming
2.lambda Expression
3.Stream API
4.Method Interface
8.22 Interface in Java 8 Default , Static Methods | New features
--------------------------------------------------------
--------------------------------------------------------
Java 8 Lambda Basics 1 - Introduction
1.Understanding lambdas
2.Using lambdas
3.Function interfaces
4.Method references
5.Collection Improvements
--------------------------------------------------------
--------------------------------------------------------
Java 8 Lambda Basics 2 - Why Lambdas
1.Lambdas enable functional programming
2.Readable and consice codes
3.Eaiser-to-use API and libraies.
4.Enables to use parallel processing.
--------------------------------------------------------
--------------------------------------------------------
Java 8 Lambda Basics 4 - Functional vs Object Oriented Programming
functionals programming makes code easy to understand and easy to write.
--------------------------------------------------------
--------------------------------------------------------
Java 8 Lambda Basics 5 - Passing Behavior in OOP
1.Everything is an Object.
2.all codes blocks are "associated" with classes and Object.

One way:
package io.javabrains;

public class Greeter {
	public void greet() {
		System.out.println("Hello World!");
	}

	public static void main(String[] args) {
		Greeter greeRef = new Greeter();
		greeRef.greet();
	}
}--------------------------------------------------------
--------------------------------------------------------
Second way:
package io.javabrains;

::::::::::::::::::::::::::::::::::Interface Greeting:-::::::::::::::::::::::::::::::::::
public interface Greeting {

	public void perform();
}

::::::::::::::::::::::::::::::::::Class Helloworld which take care of interface implement::::::::::::::::::::::::::::::::::
package io.javabrains;

public class HelloWorldGreeting implements Greeting {

	@Override
	public void perform() {
		
	}

}
::::::::::::::::::::::::::::::::::Finally calling functional programming by jdk7.:::::::::::::::::::
package io.javabrains;

public class Greeter {
	public void greet(Greeting greeting) {
		greeting.perform();
		System.out.println("Hello World!");
	}

	public static void main(String[] args) {
		Greeter greeRef = new Greeter();
		HelloWorldGreeting helloWorldGreeting = new HelloWorldGreeting();
		greeRef.greet(helloWorldGreeting);
	}
}
Above we are passing behaviors by things.
--------------------------------------------------------
--------------------------------------------------------
Java 8 Lambda Basics 6 - Introducing Lambda Expressions
Functions as Values:-
Inline values:-
String name = foo;
double pi = 3.14;
can we do in jdk 8 like:-
aBlockOfCode={
.....
.....
}

