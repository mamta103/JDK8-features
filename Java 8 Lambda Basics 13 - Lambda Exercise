::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
Java 8 Lambda Basics 13 - Lambda Exercise
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
using jdk7
package io.javabrains;

import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

public class Unit1ExerciseSolutionJava7 {
	public static void main(String[] args) {

		List<Person> people = Arrays.asList(new Person("Chales", "Dickens", 60), new Person("Lewis", "Carroll", 40),
				new Person("Thomos", "Carlyne", 51), new Person("Chalotte", "Brante", 45),
				new Person("Mattrew", "Arnold", 49));
		// Step 1 short list by lastname.
		Collections.sort(people, new Comparator<Person>() {
			public int compare(Person pRef1, Person pRef12) {

				return pRef1.getLastName().compareTo(pRef12.getLastName());
			}
		});
		// step2 create a method print all element in the list.
		printAll(people);
		System.out.println("::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::");
		// step 3 create a method print all list of name which start with C.
		printFirstNameStartWithC(people);
	}

	private static void printFirstNameStartWithC(List<Person> persons) {
		for (Person p : persons) {
			if (p.getLastName().startsWith("C"))
				System.out.println(p);
		}

	}

	private static void printAll(List<Person> people) {
		for (Person person : people)
			System.out.println(person);
	}
}
