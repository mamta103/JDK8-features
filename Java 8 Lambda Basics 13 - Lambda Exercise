::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
Java 8 Lambda Basics 13 - Lambda Exercise
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
using jdk7
package io.javabrains;

import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

public class Unit1ExerciseSolutionJava7 {
	public static void main(String[] args) {

		List<Person> people = Arrays.asList(new Person("Chales", "Dickens", 60), new Person("Lewis", "Carroll", 40),
				new Person("Thomos", "Carlyne", 51), new Person("Chalotte", "Brante", 45),
				new Person("Mattrew", "Arnold", 49));
		// Step 1 short list by lastname.
		Collections.sort(people, new Comparator<Person>() {
			public int compare(Person pRef1, Person pRef12) {

				return pRef1.getLastName().compareTo(pRef12.getLastName());
			}
		});
		// step2 create a method print all element in the list.
		printAll(people);
		System.out.println("::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::");
		// step 3 create a method print all list of name which start with C.
		printFirstNameStartWithC(people);
	}

	private static void printFirstNameStartWithC(List<Person> persons) {
		for (Person p : persons) {
			if (p.getLastName().startsWith("C"))
				System.out.println(p);
		}

	}

	private static void printAll(List<Person> people) {
		for (Person person : people)
			System.out.println(person);
	}
}
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

package io.javabrains;

import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

public class Unit1ExerciseSolutionJava7 {
	public static void main(String[] args) {

		List<Person> people = Arrays.asList(new Person("Chales", "Dickens", 60), new Person("Lewis", "Carroll", 40),
				new Person("Thomos", "Carlyne", 51), new Person("Chalotte", "Brante", 45),
				new Person("Mattrew", "Arnold", 49));
		// Step 1 short list by lastname.
		Collections.sort(people, new Comparator<Person>() {
			public int compare(Person pRef1, Person pRef12) {

				return pRef1.getLastName().compareTo(pRef12.getLastName());
			}
		});
		// step2 create a method print all element in the list.
		printAll(people);
		System.out.println("::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::");
		// step 3 create a method print all list of name which start with C.
		printConditionally(people,new Condition() {
			
			@Override
			public boolean test(Person p) {
				return p.getLastName().startsWith("C");
			}
		});
	}

	private static void printConditionally(List<Person> persons,Condition condition) {
		for (Person p : persons) {
			if (condition.test(p))
				System.out.println(p);
		}

	}

	private static void printAll(List<Person> people) {
		for (Person person : people)
			System.out.println(person);
	}
}

interface Condition{
	boolean test( Person p);
}

package io.javabrains;

import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

public class Unit1ExerciseSolutionJava8 {
	public static void main(String[] args) {

		List<Person> people = Arrays.asList(new Person("Chales", "Dickens", 60), new Person("Lewis", "Carroll", 40),
				new Person("Thomos", "Carlyne", 51), new Person("Chalotte", "Brante", 45),
				new Person("Mattrew", "Arnold", 49));
		// Step 1 short list by lastname.
		Collections.sort(people, (p1, p2) -> p1.getLastName().compareTo(p2.getLastName()));

		// step2: Create a method print all element in the list
		System.out.println("Printing all person...");
		printConditionally(people, p -> true);
		// step3: Create a method that print all people	list of name which start with C.
		System.out.println("Printing all person FirstName start with C ...");

		printConditionally(people, p -> p.getFirstName().startsWith("C"));
	}

	private static void printConditionally(List<Person> persons, Condition condition) {
		for (Person p : persons) {
			if (condition.test(p))
				System.out.println(p);
		}

	}

}
